<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom" xmlns:content="http://purl.org/rss/1.0/modules/content/">
  <channel>
    <title>Vincent55&#39;s Blog</title>
    <link>https://blog.vincent55.tw/</link>
    <description>Recent content on Vincent55&#39;s Blog</description>
    <image>
      <title>Vincent55&#39;s Blog</title>
      <url>https://i.imgur.com/zPuyQD5.jpg</url>
      <link>https://i.imgur.com/zPuyQD5.jpg</link>
    </image>
    <generator>Hugo -- gohugo.io</generator>
    <lastBuildDate>Mon, 20 Jun 2022 00:00:00 +0000</lastBuildDate><atom:link href="https://blog.vincent55.tw/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>不需要括號的 Python</title>
      <link>https://blog.vincent55.tw/posts/python-without-parentheses/</link>
      <pubDate>Fri, 19 Sep 2025 18:39:43 +0800</pubDate>
      
      <guid>https://blog.vincent55.tw/posts/python-without-parentheses/</guid>
      <description>前言 看到 huli 大大發的「不需要括號跟分號的 XSS」有感而發，於是我試著寫一個 Python 版本。
不過 Python 可沒有 tagged templates 語法糖給你用，所以我們要想其他方式呼叫函式。
考慮以下程式碼：
def safe_eval(expr): if &amp;#39;(&amp;#39; in expr or &amp;#39;)&amp;#39; in expr: raise TypeError(&amp;#34;safe_eval does not allow ().&amp;#34;) return eval(expr) print(safe_eval(input())) 你會想要怎麼去搞爆他，例如我們要去讀取機密檔案，或者是執行任意指令。
eval 可能太難了，我們先從 “safe_exec“ 開始，也就是：
def safe_exec(expr): if &amp;#39;(&amp;#39; in expr or &amp;#39;)&amp;#39; in expr: raise TypeError(&amp;#34;safe_eval does not allow ().&amp;#34;) return exec(expr) safe_exec(input()) safe_exec（先從 statement 開始） exec 可以執行整段程式碼（statements），所以比較容易透過裝飾器等語法達成。
在 Python 裡面支援裝飾器（decorator），讓你能夠在不修改原函式的情況下，在其之上添加新功能，例如：
def my_decorator(func): def wrapper(): print(&amp;#34;&amp;gt;&amp;gt; start func&amp;#34;) func() print(&amp;#34;&amp;gt;&amp;gt; end func&amp;#34;) return wrapper @my_decorator def foo(): print(&amp;#34;meowmeow!</description>
    </item>
    
    <item>
      <title>碩士推甄 114 - 台大資安碩、交大資安碩與資工碩</title>
      <link>https://blog.vincent55.tw/posts/admission2024/</link>
      <pubDate>Sat, 23 Nov 2024 09:38:43 +0800</pubDate>
      
      <guid>https://blog.vincent55.tw/posts/admission2024/</guid>
      <description>前言 轉眼又要升學了，各種原因下投了這屆的推甄，又認為自己戰場是在實務、資安組，並且比起四年前更了解目前的定位，所以就鎖定在了台大資安碩以及交大資安碩甲乙組與資工碩丙丁戊組。
上一次準備這種申請文件已經是四年前的 特殊選才 了，過程中每隔一段時間都會把新的里程碑更新上去 個人網站，因此讓四年後的今天在做出申請文件輕鬆很多，但權衡下仍舊由於外務繁忙，最終的申請文件偏向簡潔扼要。
簡單羅列時間線：
 9/10 - 開始寄信邀請推薦函老師、業界專家 9/11 - 花一整個下午做出書審資料初版 9/30～10/3 送出交大書審資料 10/3 - 送出台大資安碩書審 11/2～11/3 交大實務丙丁戊組面試 11/6 - 台大資安碩接獲備取通知 11/13 - 交大丙組正取丁組不錄取其餘備取通知  其實還有報名成大人工智慧組，但拿到資安的書審資料投，結果被刷掉，太鬧了所以就不放在這了。
最終成果：
   校系 成果     台大資安碩 備取7（書審）   交大資安碩甲組 備取13（書審）   交大資安碩乙組 備取8（書審）   交大資工碩丙組 正取（11/3面試）   交大資工碩丁組 沒上榜（11/2面試）   交大資工碩戊組 備取7（11/3面試）    書審資料 千篇一律，老師看書審資料的時間先假設在 10~20 秒，由這個出發點去撰寫書審資料，所以最後的書審資料會偏向條列式、精煉文字、凸顯重點（亮點）。
我是用 Typora 寫書審資料的，十分好用！</description>
    </item>
    
    <item>
      <title>AEGIS final 2024 紅隊心得</title>
      <link>https://blog.vincent55.tw/posts/aegis_final_2024/</link>
      <pubDate>Sat, 16 Nov 2024 20:38:43 +0800</pubDate>
      
      <guid>https://blog.vincent55.tw/posts/aegis_final_2024/</guid>
      <description>AEGIS final 2024 前言 這次老樣子跟 B33F 50UP 一起打了神盾，決賽是滲透測試的題目，這邊簡單記錄一下決賽我有碰的地方。
這次拿了第二名，跟第一名同分：
比賽前期 chumy 在處理網路的東西，讓隊員們都可以同時存取到網際網路跟題目。
Recon 比賽開始先掃競賽網段，發現有以下服務
 172.12.1.88  有一個 22 port 有一個 5000 port 的網頁服務   172.0.0.55  有一個 80 port 上面放了兩個 pwn 題，交給隊友去解   172.0.0.66 (Windows)，簡稱 A 機器  80/tcp open http  看起來有個登入介面，掃路徑後發現有 printenv cgi 讓我們看環境變數   88/tcp open kerberos-sec 135/tcp open msrpc 139/tcp open netbios-ssn 443/tcp open https 445/tcp open microsoft-ds 3306/tcp open mysql 3389/tcp open ms-wbt-server   -sC -sV 172.</description>
    </item>
    
    <item>
      <title>bcactf2024 Writeups</title>
      <link>https://blog.vincent55.tw/posts/bcactf2024-writeups/</link>
      <pubDate>Tue, 11 Jun 2024 10:38:43 +0800</pubDate>
      
      <guid>https://blog.vincent55.tw/posts/bcactf2024-writeups/</guid>
      <description>前言 這次端午節跟牛肉湯夥伴們用了一些時間來打這場 CTF，解了 web 跟 misc ，剩下的就交給隊友。 因為時間沒有很多，所以策略就是先從分數高的開始解！
這篇記錄我覺得很酷的一些題目。
最後打了 25/1201
題目們在這 https://github.com/BCACTF/bcactf-5.0
misc Jailbreak1 def sanitize(letter): print(&amp;quot;Checking for contraband...&amp;quot;) return any([i in letter.lower() for i in BANNED_CHARS]) BANNED_CHARS = &amp;quot;gdvxftundmnt&#39;~`@#$%^&amp;amp;*-/.{}&amp;quot; flag = open(&#39;flag.txt&#39;).read().strip() print(&amp;quot;Welcome to the prison&#39;s mail center&amp;quot;) msg = input(&amp;quot;Please enter your message: &amp;quot;) if sanitize(msg): print(&amp;quot;Contraband letters found!\nMessage Deleted!&amp;quot;) exit() exec(msg) 單純 ban 掉一些字元，也不能用 .，也不會將 exec 結果回傳。
先寫個腳本看我們還剩什麼能用:
import builtins exclude_chars = set(&amp;quot;gdvxftundmnt&amp;quot;) builtins_not_containing_chars = [] for name in dir(builtins): if not any(char in name for char in exclude_chars): builtins_not_containing_chars.</description>
    </item>
    
    <item>
      <title>深入解析 Python descriptor 與其 opcode 處理</title>
      <link>https://blog.vincent55.tw/posts/python_descriptor/</link>
      <pubDate>Sat, 25 May 2024 10:38:43 +0800</pubDate>
      
      <guid>https://blog.vincent55.tw/posts/python_descriptor/</guid>
      <description>環境 Python 3.9
https://github.com/python/cpython/blob/3.9/
 .info-box { padding: 1em; margin-bottom: 1em; border-left: 5px solid #2196F3; background-color: #c0c0c0; color: #101010; font-size: 16px; } .info-box code { color: #003366; background-color: #f8f8f8; padding: 2px 4px; border-radius: 3px; } .info-box code { color: #003366; background-color: #f8f8f8; padding: 2px 4px; border-radius: 3px; } .info-box a { color: #0066cc; text-decoration: none; } .info-box a:hover, .info-box a:focus { color: #004499; text-decoration: underline; }  可以發現 Python 3.10 中此處 ceval.</description>
    </item>
    
    <item>
      <title>在 Debian 安裝 Neovim 並設定 AstroNvim 自訂設定檔</title>
      <link>https://blog.vincent55.tw/posts/setupnvim/</link>
      <pubDate>Sat, 08 Jul 2023 00:00:00 +0000</pubDate>
      
      <guid>https://blog.vincent55.tw/posts/setupnvim/</guid>
      <description>紀錄一下在 Debian 作業系統上安裝 Neovim 並設定 AstroNvim 自訂設定檔</description>
    </item>
    
    <item>
      <title>CDDC CTF 2023 紀錄</title>
      <link>https://blog.vincent55.tw/posts/cddcctf2023/</link>
      <pubDate>Sun, 25 Jun 2023 00:00:00 +0000</pubDate>
      
      <guid>https://blog.vincent55.tw/posts/cddcctf2023/</guid>
      <description>這篇紀錄參加 CDDC CTF 2023 初賽及新加坡決賽，以及過程中發生的趣事。</description>
    </item>
    
    <item>
      <title>AIS3 pre-exam 2023 Writeup</title>
      <link>https://blog.vincent55.tw/posts/ais3preexam2023/</link>
      <pubDate>Sat, 24 Jun 2023 00:00:00 +0000</pubDate>
      
      <guid>https://blog.vincent55.tw/posts/ais3preexam2023/</guid>
      <description>AIS3 preexam 2023 的 writeup</description>
    </item>
    
    <item>
      <title>透過 Python 達成一般文書動作（word excel pdf printer）</title>
      <link>https://blog.vincent55.tw/posts/paperworkwithprogram/</link>
      <pubDate>Wed, 20 Jul 2022 00:00:00 +0000</pubDate>
      
      <guid>https://blog.vincent55.tw/posts/paperworkwithprogram/</guid>
      <description>紀錄一下我是怎麼透過程式來完成一般文書作業的</description>
    </item>
    
    <item>
      <title>如何在 Windows 設定開機自動啟動（含 Powershell 腳本、不須設定服務）</title>
      <link>https://blog.vincent55.tw/posts/windowsstartup/</link>
      <pubDate>Mon, 27 Jun 2022 00:00:00 +0000</pubDate>
      
      <guid>https://blog.vincent55.tw/posts/windowsstartup/</guid>
      <description>如何像 Linux 那樣設定開機自動啟動呢</description>
    </item>
    
    <item>
      <title>AIS3 pre-exam 2022 Writeup</title>
      <link>https://blog.vincent55.tw/posts/ais3preexam2022/</link>
      <pubDate>Sun, 26 Jun 2022 00:00:00 +0000</pubDate>
      
      <guid>https://blog.vincent55.tw/posts/ais3preexam2022/</guid>
      <description>AIS3 preexam 2022 的 writeup</description>
    </item>
    
    <item>
      <title>網路爬蟲環境設定（Python、pipenv、VSCode）</title>
      <link>https://blog.vincent55.tw/posts/crawlerenv/</link>
      <pubDate>Mon, 20 Jun 2022 00:00:00 +0000</pubDate>
      
      <guid>https://blog.vincent55.tw/posts/crawlerenv/</guid>
      <description>「工欲善其事，必先利其器」廢話不多說，來開始準備網路爬蟲環境吧。</description>
    </item>
    
    <item>
      <title>關於本站</title>
      <link>https://blog.vincent55.tw/about/</link>
      <pubDate>Mon, 20 Jun 2022 00:00:00 +0000</pubDate>
      
      <guid>https://blog.vincent55.tw/about/</guid>
      <description>一些本站定位以及授權</description>
    </item>
    
    <item>
      <title>第一篇文章！</title>
      <link>https://blog.vincent55.tw/posts/firstpost/</link>
      <pubDate>Tue, 15 Sep 2020 11:30:03 +0000</pubDate>
      
      <guid>https://blog.vincent55.tw/posts/firstpost/</guid>
      <description>我的第一篇文章，介紹了部落格的定位。</description>
    </item>
    
  </channel>
</rss>
